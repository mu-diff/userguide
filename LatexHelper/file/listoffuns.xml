<fun>
<name>dbesselh.m</name>
<folder>Common</folder>
<summary>First derivative of first kind Hankel function</summary>
</fun>
<fun>
<name>dbesselj.m</name>
<folder>Common</folder>
<summary>First derivative of Bessel function</summary>
</fun>
<fun>
<name>dbessely.m</name>
<folder>Common</folder>
<summary>First derivative of Newton function</summary>
</fun>
<fun>
<name>fangle.m</name>
<folder>Common</folder>
<summary>Angle with horizontal axis</summary>
</fun>

<fun>
<name>Parser.m</name>
<folder>Common</folder>
<summary>Parse an array of char (or cell of string)  to scalar array (used by IntegralOperator for example)</summary>
</fun>

<fun>
<name>ParserIncidentWave.m</name>
<folder>Common</folder>
<summary>Parse a cell of string or  a string to scalar array (used by IncidentWave for example)</summary>
</fun>

<fun>
<name>DirichletSolver.m</name>
<folder>Solver/Dirichlet</folder>
<summary>Solve the Dirichlet problem</summary>
</fun>
<fun>
<name>DirichletRCS.m</name>
<folder>Solver/Dirichlet</folder>
<summary>Compute the RCS of a Dirichlet solution</summary>
</fun>
<fun>
<name>DirichletFarField.m</name>
<folder>Solver/Dirichlet</folder>
<summary>Compute the far field of a Dirichlet solution</summary>
</fun>
<fun>
<name>DirichletNearField.m</name>
<folder>Solver/Dirichlet</folder>
<summary>Compute the near field of a Dirichlet solution</summary>
</fun>

<fun>
<name>NeumannSolver.m</name>
<folder>Solver/Neumann</folder>
<summary>Solve the Neumann problem</summary>
</fun>
<fun>
<name>NeumannRCS.m</name>
<folder>Solver/Neumann</folder>
<summary>Compute the RCS of a Neumann solution</summary>
</fun>
<fun>
<name>NeumannFarField.m</name>
<folder>Solver/Neumann</folder>
<summary>Compute the far field of a Neumann solution</summary>
</fun>
<fun>
<name>NeumannNearField.m</name>
<folder>Solver/Neumann</folder>
<summary>Compute the near field of a Neumann solution</summary>
</fun>

<fun>
<name>PenetrableSolver.m</name>
<folder>Solver/Penetrable</folder>
<summary>Solve the Penetrable problem</summary>
</fun>
<fun>
<name>PenetrableRCS.m</name>
<folder>Solver/Penetrable</folder>
<summary>Compute the RCS of a Penetrable solution</summary>
</fun>
<fun>
<name>PenetrableFarField.m</name>
<folder>Solver/Penetrable</folder>
<summary>Compute the far field of a Penetrable solution</summary>
</fun>
<fun>
<name>PenetrableNearField.m</name>
<folder>Solver/Penetrable</folder>
<summary>Compute the near field of a Penetrable solution</summary>
</fun>

 
<fun>
<name>ExNonPentrable.m</name>
<folder>Examples/Solver</folder>
<summary>Example of solving the non penetrable multiple scattering
problem using Solver module</summary>
</fun>
<fun>
<name>ExPentrable.m</name>
<folder>Examples/Solver</folder>
<summary>Example of solving the penetrable multiple scattering
problem using Solver module</summary>
</fun>



<fun>
<name>repeat_horiz.m</name>
<folder>Common</folder>
<summary>Copy/paste a row vector to build a matrix</summary>
</fun>
<fun>
<name>repeat_vert.m</name>
<folder>Common</folder>
<summary>Copy/paste a column vector to build a matrix</summary>
</fun>

<fun>
<name>BenchmarkCalderon.m</name>
<folder>Examples/Benchmark</folder>
<summary>Example of solution of penetrable scattering using Calderon projectors</summary>
</fun>
<fun>
<name>BenchmarkDirichlet.m</name>
<folder>Examples/Benchmark</folder>
<summary>Example of solution of sound soft scattering using different integral equations</summary>
</fun>
<fun>
<name>BenchmarkNeumann.m</name>
<folder>Examples/Benchmark</folder>
<summary>Example of solution of sound hard scattering using different integral equations</summary>
</fun>
<fun>
<name>BenchmarkPenetrable.m</name>
<folder>Examples/Benchmark</folder>
<summary>Example of solution of penetrable scattering using single layer potential</summary>
</fun>

<fun>
<name>HerglotzWave.m</name>
<folder>Examples/TimeReversal/FarField/Common</folder>
<summary>Compute an Herglotz wave (linear combination of plane waves)</summary>
</fun>
<fun>
<name>TimeReversalOperator.m</name>
<folder>Examples/TimeReversal/FarField/Common</folder>
<summary>Time reversal matrix in acoustic and far field context</summary>
</fun>
<fun>
<name>DORT_NonPenetrable.m</name>
<folder>Examples/TimeReversal/FarField/NonPenetrable</folder>
<summary>DORT for acoustic sound soft obstacles (far field)</summary>
</fun>
<fun>
<name>DORT_dielectric.m</name>
<folder>Examples/TimeReversal/FarField/NonPenetrable</folder>
<summary>DORT for penetrable obstacles (far field)</summary>
</fun>
<fun>
<name>BlockIntegralOperator.m</name>
<folder>IntOperators/Dense</folder>
<summary>Generic dense block of an integral operator</summary>
</fun>

<fun>
<name>IntegralOperator.m</name>
<folder>IntOperators/Dense</folder>
<summary>Generic integral operator dense matrix (full)</summary>
</fun>
<fun>
<name>BlockCalderonProjector.m</name>
<folder>IntOperators/Dense/Interface/Block</folder>
<summary>Calderon projector block</summary>
</fun>
<fun>
<name>BlockDnDoubleLayer.m</name>
<folder>IntOperators/Dense/Interface/Block</folder>
<summary>Block of the normal derivative of the double layer integral operator</summary>
</fun>
<fun>
<name>BlockDnSingleLayer.m</name>
<folder>IntOperators/Dense/Interface/Block</folder>
<summary>Block of the normal derivative of the single layer integral operator</summary>
</fun>
<fun>
<name>BlockDoubleLayer.m</name>
<folder>IntOperators/Dense/Interface/Block</folder>
<summary>Block of the double layer integral operator</summary>
</fun>
<fun>
<name>BlockIdentity.m</name>
<folder>IntOperators/Dense/Interface/Block</folder>
<summary>Block of the identity integral operator</summary>
</fun>
<fun>
<name>BlockPrecondDirichlet.m</name>
<folder>IntOperators/Dense/Interface/Block</folder>
<summary>Block of the preconditioned integral operator (sound soft case)</summary>
</fun>
<fun>
<name>BlockPrecondNeumann.m</name>
<folder>IntOperators/Dense/Interface/Block</folder>
<summary>Block of the preconditioned integral operator (sound hard case)</summary>
</fun>

<fun>
<name>BlockSingleLayer.m</name>
<folder>IntOperators/Dense/Interface/Block</folder>
<summary>Block of the single layer integral operator</summary>
</fun>

<fun>
<name>CalderonProjector.m</name>
<folder>IntOperators/Dense/Interface/Full</folder>
<summary>Full dense matrix of the Calderon projector</summary>
</fun>

<fun>
<name>DnDoubleLayer.m</name>
<folder>IntOperators/Dense/Interface/Full</folder>
<summary>Full dense matrix of the normal derivative of the double layer integral operator</summary>
</fun>

<fun>
<name>DnSingleLayer.m</name>
<folder>IntOperators/Dense/Interface/Full</folder>
<summary>Full dense matrix of the normal derivative of the single layer integral operator</summary>
</fun>

<fun>
<name>DoubleLayer.m</name>
<folder>IntOperators/Dense/Interface/Full</folder>
<summary>Full dense matrix of the double layer integral operator</summary>
</fun>

<fun>
<name>Identity.m</name>
<folder>IntOperators/Dense/Interface/Full</folder>
<summary>Full dense matrix of the identity operator</summary>
</fun>

<fun>
<name>PrecondDirichlet.m</name>
<folder>IntOperators/Dense/Interface/Full</folder>
<summary>Full dense matrix of the preconditioned integral operator (sound soft case)</summary>
</fun>

<fun>
<name>PrecondNeumann.m</name>
<folder>IntOperators/Dense/Interface/Full</folder>
<summary>Full dense matrix of the preconditioned integral operator (sound hard case)</summary>
</fun>

<fun>
<name>SingleLayer.m</name>
<folder>IntOperators/Dense/Interface/Full</folder>
<summary>Full dense matrix of the single layer integral operator</summary>
</fun>

<fun>
<name>SpBlockIntegralOperator.m</name>
<folder>IntOperators/Sparse</folder>
<summary>Generic sparse block of an integral operator</summary>
</fun>


<fun>
<name>SpIntegralOperator.m</name>
<folder>IntOperators/Sparse</folder>
<summary>Generic integral operator sparse matrix (full)</summary>
</fun>

<fun>
<name>SpAddIdentity.m</name>
<folder>IntOperators/Sparse/Functions</folder>
<summary>Sparse function: add identity to a sparse operator</summary>
</fun>
<fun>
<name>SpMatVec.m</name>
<folder>IntOperators/Sparse/Functions</folder>
<summary>Sparse function: sparse matrix - vector product (possibly multiples)</summary>
</fun>
<fun>
<name>SpSingleMatVec.m</name>
<folder>IntOperators/Sparse/Functions</folder>
<summary>Sparse function: sparse matrix - (only one) vector product</summary>
</fun>

<fun>
<name>SpBlockDnDoubleLayer.m</name>
<folder>IntOperators/Sparse/Interface/Block</folder>
<summary>Sparse block of the normal derivative of the double layer integral operator</summary>
</fun>
<fun>
<name>SpBlockDnSingleLayer.m</name>
<folder>IntOperators/Sparse/Interface/Block</folder>
<summary>Sparse block of the normal derivative of the single layer integral operator</summary>
</fun>
<fun>
<name>SpBlockDoubleLayer.m</name>
<folder>IntOperators/Sparse/Interface/Block</folder>
<summary>Sparse block of the double layer integral operator</summary>
</fun>
<fun>
<name>SpBlockIdentity.m</name>
<folder>IntOperators/Sparse/Interface/Block</folder>
<summary>Sparse block of the identity operator</summary>
</fun>
<fun>
<name>SpBlockPrecondDirichlet.m</name>
<folder>IntOperators/Sparse/Interface/Block</folder>
<summary>Sparse block of the preconditioned integral operator (sound soft case)</summary>
</fun>
<fun>
<name>SpBlockPrecondNeumann.m</name>
<folder>IntOperators/Sparse/Interface/Block</folder>
<summary>Sparse block of the preconditioned integral operator (sound hard case)</summary>
</fun>
<fun>
<name>SpBlockSingleLayer.m</name>
<folder>IntOperators/Sparse/Interface/Block</folder>
<summary>Sparse block of the single layer integral operator</summary>
</fun>

<fun>
<name>SpDnDoubleLayer.m</name>
<folder>IntOperators/Sparse/Interface/Full</folder>
<summary>Sparse matrix of the normal derivative of the double layer integral operator</summary>
</fun>
<fun>
<name>SpDnSingleLayer.m</name>
<folder>IntOperators/Sparse/Interface/Full</folder>
<summary>Sparse matrix of the normal derivative of the single layer integral operator</summary>
</fun>
<fun>
<name>SpDoubleLayer.m</name>
<folder>IntOperators/Sparse/Interface/Full</folder>
<summary>Sparse matrix of the double layer integral operator</summary>
</fun>
<fun>
<name>SpIdentity.m</name>
<folder>IntOperators/Sparse/Interface/Full</folder>
<summary>Sparse matrix of the identity operator</summary>
</fun>
<fun>
<name>SpPrecondDirichlet.m</name>
<folder>IntOperators/Sparse/Interface/Full</folder>
<summary>Sparse matrix of the preconditioned integral operator (sound soft case)</summary>
</fun>
<fun>
<name>SpPrecondNeumann.m</name>
<folder>IntOperators/Sparse/Interface/Full</folder>
<summary>Sparse matrix of the preconditioned integral operator (sound hard case)</summary>
</fun>
<fun>
<name>SpSingleLayer.m</name>
<folder>IntOperators/Sparse/Interface/Full</folder>
<summary>Sparse matrix of the single layer integral operator</summary>
</fun>

<fun>
<name>FarField.m</name>
<folder>PostProcessing/FarField</folder>
<summary>Generic far field computation from densities</summary>
</fun>
<fun>
<name>FarField_to_RCS.m</name>
<folder>PostProcessing/FarField</folder>
<summary>Radar Cross Section (RCS) from far field</summary>
</fun>
<fun>
<name>RCS.m</name>
<folder>PostProcessing/FarField</folder>
<summary>Generic Radar Cross Section (RCS) computation from densities</summary>
</fun>

<fun>
<name>FarFieldDoubleLayer.m</name>
<folder>PostProcessing/FarField/Interface</folder>
<summary>Far field of the double layer potential only</summary>
</fun>
<fun>
<name>FarFieldSingleLayer.m</name>
<folder>PostProcessing/FarField/Interface</folder>
<summary>Far field of the single layer potential only</summary>
</fun>
<fun>
<name>RCSDoubleLayer.m</name>
<folder>PostProcessing/FarField/Interface</folder>
<summary>Radar Cross Section (RCS) of the double layer potential only</summary>
</fun>
<fun>
<name>RCSSingleLayer.m</name>
<folder>PostProcessing/FarField/Interface</folder>
<summary>Radar Cross Section (RCS) of the single layer potential only</summary>
</fun>
<fun>

<name>BoundaryOfObstacles.m</name>
<folder>PostProcessing/Geometry</folder>
<summary>Extract the boundary of the obstacle</summary>
</fun>
<fun>
<name>MaskMatrixObstacles.m</name>
<folder>PostProcessing/Geometry</folder>
<summary>Matrix with boolean values inside or outside obstacles</summary>
</fun>
<fun>
<name>PlotCircles.m</name>
<folder>PostProcessing/Geometry</folder>
<summary>Display obstacles on figure</summary>
</fun>

<fun>
<name>IncidentWaveOnGrid.m</name>
<folder>PostProcessing/IncidentWave</folder>
<summary>Compute incident wave on a (Matlab) meshgrid</summary>
</fun>

<fun>
<name>ExternalPotential.m</name>
<folder>PostProcessing/NearField</folder>
<summary>Compute potentials (single, double or linear combination) on a (Matlab) meshgrid and outside the obstacles</summary>
</fun>
<fun>
<name>InternalPotential.m</name>
<folder>PostProcessing/NearField</folder>
<summary>Compute potentials (single, double or linear combination) on a (Matlab) meshgrid and inside the obstacles</summary>
</fun>
<fun>
<name>BlockPotential.m</name>
<folder>PostProcessing/NearField/Functions</folder>
<summary>Generic block potential matrix used to compute external or internal potentials</summary>
</fun>
<fun>
<name>GetPotentialOptions.m</name>
<folder>PostProcessing/NearField/Functions</folder>
<summary>Options for potential computations are condensed here</summary>
</fun>
<fun>
<name>ExternalDoubleLayerPotential.m</name>
<folder>PostProcessing/NearField/Interface</folder>
<summary>External potential of double layer potential only</summary>
</fun>
<fun>
<name>ExternalSingleLayerPotential.m</name>
<folder>PostProcessing/NearField/Interface</folder>
<summary>External potential of single layer potential only</summary>
</fun>
<fun>
<name>InternalDoubleLayerPotential.m</name>
<folder>PostProcessing/NearField/Interface</folder>
<summary>Internal potential of double layer potential only</summary>
</fun>
<fun>
<name>InternalSingleLayerPotential.m</name>
<folder>PostProcessing/NearField/Interface</folder>
<summary>Internal potential of single layer potential only</summary>
</fun>

<fun>
<name>FourierTruncation.m</name>
<folder>PreProcessing/Fourier</folder>
<summary>Provide the number of mode to kept in the Fourier series</summary>
</fun>
<fun>
<name>CheckPlacement.m</name>
<folder>PreProcessing/Geometry</folder>
<summary>Verify if the obstacles are satisfying the condition (overlapping, ...)</summary>
</fun>
<fun>
<name>CreateRandomDisks.m</name>
<folder>PreProcessing/Geometry</folder>
<summary>Place randomly random disks in a box</summary>
</fun>
<fun>
<name>RectangularLattice.m</name>
<folder>PreProcessing/Geometry</folder>
<summary>Build a rectangular lattice of disks</summary>
</fun>
<fun>
<name>RemoveDisk.m</name>
<folder>PreProcessing/Geometry</folder>
<summary>Remove some disks</summary>
</fun>
<fun>
<name>TriangularLattice.m</name>
<folder>PreProcessing/Geometry</folder>
<summary>Build a triangular lattice of disks</summary>
</fun>

<fun>
<name>BlockIncidentWave.m</name>
<folder>PreProcessing/IncidentWave</folder>
<summary>Block vector of a generic incident wave (right hand side, block=1 obstacle)</summary>
</fun>
<fun>
<name>IncidentWave.m</name>
<folder>PreProcessing/IncidentWave</folder>
<summary>Full vector of a generic incident wave (right hand side)</summary>
</fun>

<fun>
<name>BlockDnPlaneWave.m</name>
<folder>PreProcessing/IncidentWave/Block</folder>
<summary>Block vector (=1 obstacle) of a the right hand side of the normal derivative of a plane wave</summary>
</fun>
<fun>
<name>BlockDnPlaneWavePrecond.m</name>
<folder>PreProcessing/IncidentWave/Block</folder>
<summary>Block vector (=1 obstacle) of a the right hand side of the normal derivative of a plane wave for the preconditioned problem of sound-hard scattering</summary>
</fun>
<fun>
<name>BlockDnPointSource.m</name>
<folder>PreProcessing/IncidentWave/Block</folder>
<summary>Block vector (=1 obstacle) of a the right hand side of the normal derivative of a point source wave</summary>
</fun>
<fun>
<name>BlockPlaneWave.m</name>
<folder>PreProcessing/IncidentWave/Block</folder>
<summary>Block vector (=1 obstacle) of a the right hand side of the trace of a plane wave</summary>
</fun>
<fun>
<name>BlockPlaneWavePrecond.m</name>
<folder>PreProcessing/IncidentWave/Block</folder>
<summary>Block vector (=1 obstacle) of a the right hand side of the trace of a plane wave for the preconditioned problem of sound-soft scattering</summary>
</fun>
<fun>
<name>BlockPointSource.m</name>
<folder>PreProcessing/IncidentWave/Block</folder>
<summary>Block vector (=1 obstacle) of a the right hand side of the trace of a point source wave</summary>
</fun>

<fun>
<name>DnPlaneWave.m</name>
<folder>PreProcessing/IncidentWave/Full</folder>
<summary>Full vector (=all obstacle) of a the right hand side of the normal derivative of a plane wave</summary>
</fun>
<fun>
<name>DnPlaneWavePrecond.m</name>
<folder>PreProcessing/IncidentWave/Full</folder>
<summary>Full vector (=all obstacle) of a the right hand side of the normal derivative of a plane wave for the preconditioned problem of sound-hard scattering</summary>
</fun>
<fun>
<name>DnPointSource.m</name>
<folder>PreProcessing/IncidentWave/Full</folder>
<summary>Full vector (=all obstacle) of a the right hand side of the normal derivative of a point source wave</summary>
</fun>
<fun>
<name>PlaneWave.m</name>
<folder>PreProcessing/IncidentWave/Full</folder>
<summary>Full vector (=all obstacle) of a the right hand side of the trace of a plane wave</summary>
</fun>
<fun>
<name>PlaneWavePrecond.m</name>
<folder>PreProcessing/IncidentWave/Full</folder>
<summary>Full vector (=all obstacle) of a the right hand side of the trace of a plane wave for the preconditioned problem of sound-soft scattering</summary>
</fun>
<fun>
<name>PointSource.m</name>
<folder>PreProcessing/IncidentWave/Full</folder>
<summary>Full vector (=all obstacle) of a the right hand side of the trace of a point source wave</summary>
</fun>
